/**
 * Part of OrganizerB
 * Created by: @Author V
 * Date: @Date 13-Jun-22
 * Time: 16:15
 * =============================================================
 **/

package com.omicron.organizerb.controller;

import com.omicron.organizerb.model.Task;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ListCell;
import javafx.scene.layout.HBox;
import lombok.Data;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;


// Stolen and modified from: https://github.com/NF1198/JavaFXCustomListViewExample
@Data
public class TaskListCellController extends ListCell<Task> implements Initializable {


    // ========================================================================================
    // Fields
    // ========================================================================================

    @FXML
    public CheckBox taskCheckBox;
    @FXML
    public HBox cellHBox;

    private Task task;

    private OrganizerController organizerControllerReference;

    // ========================================================================================
    // Constructors, Getters & Setters
    // ========================================================================================

    // generated by lombok

    // ========================================================================================
    // Methods
    // ========================================================================================

    // todo: refactor that crap
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {


        updateSelected(false);

        cellHBox.getChildrenUnmodifiable().forEach(child -> {
            child.focusedProperty().addListener((obj, prev, curr) -> {
                if (!curr) {
                    commitEdit(task);
                }
            });
        });

        taskCheckBox.setOnAction(e -> {
            if (task == null) return;
            if (taskCheckBox.isSelected()) {
                task.setDone(true);
                organizerControllerReference.markTaskAsDone(null);
            }

        });

        setGraphic(cellHBox); // this thing sets root graphic node of our custom list cell
    }
    
    public static TaskListCellController newInstance() {
        FXMLLoader loader = getFXMLLoader("src/main/resources/fxml/taskListCell.fxml");
        try {
            loader.load();
            return loader.getController();
        } catch (IOException ex) {
            return null;
        }
    }

    private static FXMLLoader getFXMLLoader(String path) {
        try {
            var dialogFXML = new File(path).toURI().toURL();
            return new FXMLLoader(dialogFXML);
        }catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    protected void updateItem(Task task, boolean isEmpty) {
        super.updateItem(task, isEmpty);
        cellHBox.getChildrenUnmodifiable().forEach(c -> c.setVisible(!isEmpty));
        if (isEmpty) return;
        this.task = task;
        taskCheckBox.setText(task.getTitle());
        taskCheckBox.setSelected(task.isDone());
    }

    @Override
    public void updateSelected(boolean selected) {
        super.updateSelected(selected);
        // update UI hints based on selected state
        cellHBox.getChildrenUnmodifiable().forEach(c -> {
            // setting mouse-transparent to false ensure that the cell will get selected we click on a field in a non-selected cell
            c.setMouseTransparent(!selected);
            // focus-traversable prevents users from "tabbing" out of the currently selected cell
            c.setFocusTraversable(selected);
        });
        if (selected) {
            // start editing when the cell is selected
            startEdit();
        } else {
            if (task != null) {
                // commit edits if the cell becomes unselected we're not keeping track of "dirty" state so this will commit changes even to unmodified cells
                commitEdit(task);
            }
        }
    }

    @Override
    public void commitEdit(Task newValue) {

        newValue = (newValue == null) ? this.task : newValue;

        super.commitEdit(newValue); // <-- important

        if (this.task == null) return;
        newValue.setDone(task.isDone());
    }

    public void setOrganizerControllerReference (OrganizerController reference) {
        this.organizerControllerReference = reference;
    }


}
